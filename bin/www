#!/usr/bin/env node

/**
 * Module dependencies.
 */

"use strict";

var fs = require('fs');
var path = require('path');

//로그 기록 directory가 있는지 확인하고 없으면 생성한다.
if(!fs.existsSync(path.join(__dirname, '../', 'log'))) {
  fs.mkdirSync(path.join(__dirname, '../', 'log'));
}

var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

//SSL files
var privateKey = fs.readFileSync(__dirname + '/../ssl/server.key');
var sslCertificate = fs.readFileSync(__dirname + '/../ssl/server.crt');

//Cluster를 이용하여 멀티코어 처리를 한다.
if(cluster.isMaster) {
  for(var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', function(worker, code, signal) {
    console.log('worker ' + worker.process.pid + ' died');
  });
}
else {

  var debug = require('debug')('OMS:server');
  var express = require('../app').express;
  var https = require('https');
  var http = require('http');

  /**
   * Create HTTP, HTTPS server.
   */

  var httpServer = http.createServer(express);
  var httpsServer = https.createServer({
    key: privateKey,
    cert: sslCertificate
  }, express);

  /**
   * Listen on provided port, on all network interfaces.
   */

  var httpPort = normalizePort('3080');
  var httpsPort = normalizePort('3443');

  httpServer.listen(normalizePort(httpPort));
  httpServer.on('error', onErrorHttp);
  httpServer.on('listening', onListeningHttp);

  httpsServer.listen(normalizePort(httpsPort));
  httpsServer.on('error', onErrorHttps);
  httpsServer.on('listening', onListeningHttps);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
      ? 'Pipe ' + httpPort
      : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string'
      ? 'Pipe ' + httpsPort
      : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListeningHttp() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHttps() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}