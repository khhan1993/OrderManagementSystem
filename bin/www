#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var express = app.express;
var debug = require('debug')('HanyangOnlineJudge_API:server');
var https = require('https');
var http = require('http');
var fs = require('fs');

/**
 * Create HTTP, HTTPS server.
 */

var httpServer = http.createServer(express);
var httpsServer = https.createServer({
  key: fs.readFileSync(__dirname + '/../ssl/server.key'),
  cert: fs.readFileSync(__dirname + '/../ssl/server.crt')
}, express);

/**
 * Listen on provided port, on all network interfaces.
 */

var httpPort = normalizePort('3080');
var httpsPort = normalizePort('3443');

httpServer.listen(normalizePort(httpPort));
httpServer.on('error', onErrorHttp);
httpServer.on('listening', onListeningHttp);

httpsServer.listen(normalizePort(httpsPort));
httpsServer.on('error', onErrorHttps);
httpsServer.on('listening', onListeningHttps);

exports.httpsServer = httpsServer;
var io = require('../controllers/websocket');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
      ? 'Pipe ' + httpPort
      : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string'
      ? 'Pipe ' + httpsPort
      : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHttp() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHttps() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}